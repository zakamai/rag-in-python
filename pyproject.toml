[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rag-in-python"
version = "0.1.0"
description = "A comprehensive RAG (Retrieval-Augmented Generation) toolkit built with LlamaIndex and FAISS"
readme = "README.md"
authors = [
    {name = "RAG Development Team", email = "team@example.com"},
]
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
keywords = [
    "rag",
    "retrieval-augmented-generation",
    "nlp",
    "machine-learning",
    "embeddings",
    "vector-search",
    "llamaindex",
    "faiss",
    "openai",
    "document-search",
    "question-answering",
]
dependencies = [
    "llama-index>=0.10.0",
    "llama-index-vector-stores-faiss>=0.1.0",
    "llama-index-embeddings-openai>=0.1.0",
    "llama-index-llms-openai>=0.1.0",
    "faiss-cpu>=1.7.0",
    "openai>=1.0.0",
    "tiktoken>=0.5.0",
    "numpy>=1.24.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
faiss-cpu = [
    "faiss-cpu>=1.7.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
]

[project.scripts]
rag-cli = "rag_in_python.cli:main"

[project.urls]
Homepage = "https://github.com/example/rag-in-python"
"Bug Reports" = "https://github.com/example/rag-in-python/issues"
Source = "https://github.com/example/rag-in-python"
Documentation = "https://github.com/example/rag-in-python/blob/main/README.md"

[tool.hatch.build.targets.wheel]
packages = ["src/rag_in_python"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests", 
    "/docs",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/.env.example",
]

[tool.hatch.version]
path = "src/rag_in_python/__init__.py"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
    "SIM", # flake8-simplify
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]  # Allow assert in tests

[tool.ruff.lint.isort]
known-first-party = ["rag_in_python"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "llama_index.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration  
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"